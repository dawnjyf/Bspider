#-*- coding:utf-8 -*-
'''
跟随大神的思路,开始自己的哔哩哔哩视频爬虫之旅
目前发现的情况是先发送两个OPTIONS请求，再GET请求,看来得编辑多条请求来获取视频
刷新页面后get请求中ssig和trid两个参数会变，其余不变
我的目标错了，应该找一个请求获取视频下载地址，而不是找一个下载流文件的请求(现在发现每个流文件只能下载一次且内部会更改一些随机参数以区别)
20181108:小视频搞定了，正常视频还需要研究一下,先把欣小萌有点污的所有短视频下一下作为成功的证据,失败了4个应该
正常网页请求和requests请求同一个网址返回的html不一样
20181109成功下载一个flv视频文件
20181112想办法尝试搞一把mp4文件，终于成功了，获取了MP4文件，只是没有声音

至此，bilibili上所有的素材都可以被下载，只是flv是音画一起，MP4是音画分开的。另外下载前还要自行分析是那种格式....貌似可以整合哈哈，有空再弄
还需要，正则处title然后新建目录视频音频一起存放，这都是后续改进项目，目前自用的话核心功能都ok

20181115，电影文件所用的url更隐蔽，有空再研究。

20190225解析失败了,需要重新解析,ok了,应该是request这个包的问题
20190410完成了对于长视频分段url的问题，同时完成了ffmpeg的视频连结
'''

import requests
import time
import random
import re
import os
from myFFmpeg import try_def_coding as tfp

def get_urlJson_Video(User_Mid):
    '''
    找到了可用的请求，获取视频列表主要是aid,由于不知道是不是flv格式，所以单个视频下载比较好，不批量搞
    :return:
    '''
    url = 'https://space.bilibili.com/ajax/member/getSubmitVideos?'
    headers = {
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
    }

    params = {
        'mid': User_Mid,
        'pag': 1,
        'pagesize': 25
    }#参数才是关键

    try:
        video_list = []
        html = requests.get(url, params=params, headers=headers,verify = False).json()
        vnum = html['data']['count'] #视频的个数,这里指的是服务器端一共有88个，而我只申请了25个所以会报错
        print(html)
        print(vnum)
        for i in range(25):  #不要盲信count
            aid = html['data']['vlist'][i]['aid']
            title = html['data']['vlist'][i]['title']
            author = html['data']['vlist'][i]['author']
            tmp = {'aid': aid, 'title': title, 'author': author}
            video_list.append(tmp)
        print(type(video_list),video_list)
        return video_list
    except BaseException as e:
        print('request error')
        print(e.args)
        pass


def get_playerURL_Vide0_m4s(url,aid,User_Mid,local_path = None,index=None):
    '''
    其余和flv都一样，就是尝试正则处m4s的url，由于有很多个，要一个一个试
    30280,30216是声音audio
    15,32,64,80是视频大小 360P,480P,720P,1080P
    所以下面的问题是怎么一次性获取视频
    成功了，header中加一个range参数就行了而且只要写0-。
    然后还要下载一个声音

    20190307整合了flv格式,但是flv格式的下载url也不是固定格式,需要进一步研究

    :param aid视频:
    :return:
    '''
    header = {
        'Host': 'www.bilibili.com',
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age = 0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Referer': 'https://space.bilibilicom/'+str(User_Mid)+'/',  #这里是up主号 要注意
        'Accept-Encoding': 'gzip, deflate,br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Cookie': 'LIVE_BUVID=AUTO1515149705744511; fts=1514987102; buvid3=24187AEB-8DF0-4376-866B-F1675054F7D123662infoc; pgv_pvi=531680256; rpdid=olpksilwwsdosoplqmoww; im_notify_type_40745909=0; stardustvideo=1; UM_distinctid=165af12253a9bc-01c9b0cc001639-74173d4f-1fa400-165af12253c332; CURRENT_FNVAL=16; pos=3; _uuid=FEA87AF3-C1D8-61D8-D1D5-86926BCC7C6359589infoc; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1541642139; sid=jcfegf0q; CURRENT_QUALITY=64; bp_t_offset_40745909=220192575153103178; finger=17c9e5f5; DedeUserID=40745909; DedeUserID__ckMd5=50c54dcd485a8634; SESSDATA=056c38dd%2C1553642772%2C3456a621; bili_jct=6c5769cf41bc49479ba0c8afb26bff6d; _dfcaptcha=44fdc9360b372c8e5a1cc6cd6fe9faf0'

    }
    print(url)
    requests.packages.urllib3.disable_warnings()
    html = requests.get(url, headers=header,verify=False)
    print(html)
    #print(html.text)
    if index is not None:
        file_name = re.findall(r'"part":"(.*?)?"', html.text)[index-1]

    flv_url = re.findall(r'"url":"(.*?flv.*?)?","backup_url"', html.text)
    #flv_url = re.findall(r'"order":3,"length":621970,"size":165149290,"ahead":"","vhead":"","url":"(.*flv/?.*)?","backup_url"',html.text)
    print(flv_url)
    if len(flv_url) > 0:
        print('————下面是flv视频下载阶段————')
        try:
            if index is None:
                print('flv未分段')
                download_flv(flv_url[0], str(aid), local_path, 'flv')
            else:
                print('flv已分段')
                download_flvs(flv_url,str(aid),local_path,'flv',file_name)
            print("视频下载结束")
        except BaseException as e:
            print("出错了：",e)
            pass
    else:
        print('不是flv格式')

    vedio_url = re.findall(r'"id":80,"baseUrl":"(.*?m4s.*?)?",',html.text)
    print(vedio_url)
    if len(vedio_url) > 0:
        print('————下面是MP4视频下载阶段————')
        try:
            download_flv(vedio_url[0],str(aid),local_path,'mp4')
            print("视频下载结束")
        except BaseException as e:
            print("出错了：",e)
            pass
    else:
        print('不是mp4格式，放弃吧')

    html = requests.get(url, headers=header, verify=False)
    audio_url  = re.findall(r'"id":30280,"baseUrl":"(.*?m4s.*?)?","backupUrl"',html.text)
    print(audio_url)
    if len(audio_url) > 0:
        print('————下面是MP3音频下载阶段————')
        try:
            download_flv(audio_url[0],str(aid),local_path,'mp3')
            print("音频下载结束")
            tfp.ffmpeg_union_mp4_mp3(local_path)   #有单独音频文件才需要合并
        except BaseException as e:
            print("出错了：",e)
            pass
    else:
        print('不是mp3格式，放弃吧')





def download_flv(url,aid,local_path = None,file_type = 'flv',file_name = None):
    if not os.path.isdir(local_path):
        os.mkdir(local_path)
    host = re.findall('http://(.*?)/upgcxcode',url)[0]
    print(host)
    headers = {
        'Host': host,
        'Connection': 'keep-alive',
        'Origin': 'https://www.bilibili.com',
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
        'Accept': '*/*',
        'range':'bytes=0-',
        'Referer': 'https://www.bilibili.com/video/av'+ aid+ "/",
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        }
    if file_name is None:
        file_name = time.time()

    with open(local_path+'\\%s.' % file_name + file_type, 'wb') as f:
         f.write(requests.get(url, headers=headers, verify=False).content)

def download_flvs(urls,aid,local_path = None,file_type = 'flv',file_name = None):
    '''
    当视频文件分段时采用这个函数将文件合并
    :param url:
    :param aid:
    :param local_path:
    :param file_type:
    :param file_name:
    :return:
    '''
    if not os.path.isdir(local_path):
        os.mkdir(local_path)
    if file_name is None:
        file_name = 'file_name'

    file_num = 0
    for url in urls:
        host = re.findall('http://(.*?)/upgcxcode',url)[0]
        print(host)
        headers = {
            'Host': host,
            'Connection': 'keep-alive',
            'Origin': 'https://www.bilibili.com',
            'User-Agent':
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
            'Accept': '*/*',
            'range':'bytes=0-',
            'Referer': 'https://www.bilibili.com/video/av'+ aid+ "/",
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'zh-CN,zh;q=0.9',
            }
        with open(local_path+'\\%s_%s.%s' % (file_name,file_num,file_type), 'wb') as f:
             f.write(requests.get(url, headers=headers, verify=False).content)
        file_num += 1
        print('now sleep')
        time.sleep(10)
        print('sleep end')


def get_oneVC_json():
    '''
    向小视频伸出魔抓,用老办法不行了,换一个博客的写法，大概明白原理了，先获取json格式的下载地址，试一下
    有了有了：http://upos-hz-mirrorkodo.acgvideo.com/dspxcode/i181106wspact0phwm5z1gnqsas2c01t-1-56.mp4?um_deadline=1541653904&rate=500000&oi=2061733477&um_sign=5bcd5065390e86cbc4b4d11f31b2f597&gen=dsp&wsTime=1541653904&platform=html5
    'video_size': '1389273'
    下面就要看怎么获取video_id
    :return:
    '''
    url = 'http://api.vc.bilibili.com/clip/v1/video/detail?'
    headers = {
        'User - Agent':
            'Mozilla/5.0(Windows NT 10.0; WOW64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/70.0.3534.4Safari/537.36'
    } #头貌似这样就够了

    params = {
        'video_id': '1881218',
        'need_playurl': 1,
    }#参数才是关键

    try:
        html = requests.get(url, params=params, headers=headers)
        print(html)  #这是看服务器反馈代码的 200 表示成功等等
        print(html.json())  #这个是看json数据的
        return html.json()

    except BaseException:
        print('request error')
        pass

def get_TAVC_jsons():
    '''
    我找到了，TA的小视频区域的json，快把header记录
    :return:
    '''
    url = 'http://api.vc.bilibili.com/clip/v1/video/ones?'
    headers = {
        'User - Agent':
            'Mozilla/5.0(Windows NT 10.0; WOW64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/70.0.3534.4Safari/537.36'
    } #头貌似这样就够了

    params = {
        'poster_uid': '8366990',
        'need_playurl': 0,
        'next_offset': 0,
        'page_size': 80  #这个参数是控制获取数量的
    }#参数才是关键

    try:
        html = requests.get(url, params=params, headers=headers)
        print(html)  #这是看服务器反馈代码的 200 表示成功等等
        print(html.json())  #这个是看json数据的
        return html.json()

    except BaseException as e:
        print('request error')
        print(e)
        pass


def vc_download(html):
    '''
    从json中正则处地址，接下来就是下载,有点困难，先解析json
    其实解析玩json就已经可以了，下载地址已经有了只是时间问题，这个链接有有效时间或者次数
    :return:
    '''
    print(type(html))
    print(html)
    info = html['data']['item']
    title = info['description']
    player_url = info['video_playurl']
    print(title,player_url)
    print('解析完毕，下面是下载时间')

    size = 0
    path = 'bilibili_vc.mp4'
    url = 'http://upos-hz-mirrorkodo.acgvideo.com/dspxcode/i181106wspact0phwm5z1gnqsas2c01t-1-56.mp4?um_deadline=1541653904&rate=500000&oi=2061733477&um_sign=5bcd5065390e86cbc4b4d11f31b2f597&gen=dsp&wsTime=1541653904&platform=html5'
    headers = {
        'User - Agent':
            'Mozilla/5.0(Windows NT 10.0; WOW64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/70.0.3534.4Safari/537.36'
    }

def vc_TA_download(html):
    '''
    因为TA的小视频的json数据格式和原来的不一致，需要重新解析
    :return:
    '''
    print(type(html))
    print(html)
    infos = html['data']['items']
    for info in infos:
        print(info['description'],info['video_playurl'])
    print('解析完毕，下面是下载时间')

    for info in infos:
        title = info['description']
        url = info['video_playurl']
        print(title)
        try:
            download(url,'%s.mp4' % title)
            print('成功下载一个!')
        except BaseException:
            print('凉凉,下载失败')
            pass
        time.sleep(int(format(random.randint(2, 8))))



def download(url,path):
    headers = {
        'User - Agent':
            'Mozilla/5.0(Windows NT 10.0; WOW64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/70.0.3534.4Safari/537.36'
    }
    response = requests.get(url,headers=headers,stream=True)
    chunk_size = 1024  # 每次下载的数据大小
    if response.status_code == 200:
        with open(path,'wb') as file:
            for data in response.iter_content(chunk_size=chunk_size):
                file.write(data)


def get_from_url(url,loacl_path = None,index = None):
    '''
    简化输入参数
    :param url:
    :param loacl_path:
    :return:
    '''
    print('now get from url:'+url)
    header = {
        'Host': 'www.bilibili.com',
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age = 0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate,br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Cookie': 'LIVE_BUVID=AUTO1515149705744511; fts=1514987102; buvid3=24187AEB-8DF0-4376-866B-F1675054F7D123662infoc; pgv_pvi=531680256; rpdid=olpksilwwsdosoplqmoww; im_notify_type_40745909=0; stardustvideo=1; UM_distinctid=165af12253a9bc-01c9b0cc001639-74173d4f-1fa400-165af12253c332; CURRENT_FNVAL=16; pos=3; _uuid=FEA87AF3-C1D8-61D8-D1D5-86926BCC7C6359589infoc; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1541642139; sid=jcfegf0q; CURRENT_QUALITY=64; bp_t_offset_40745909=220192575153103178; finger=17c9e5f5; DedeUserID=40745909; DedeUserID__ckMd5=50c54dcd485a8634; SESSDATA=056c38dd%2C1553642772%2C3456a621; bili_jct=6c5769cf41bc49479ba0c8afb26bff6d; _dfcaptcha=44fdc9360b372c8e5a1cc6cd6fe9faf0'

    }
    requests.packages.urllib3.disable_warnings()
    html = requests.get(url, headers = header ,verify=False)
    print(html)
    #print(html.text)
    aid = re.findall(r'"aid":(\d+?),',html.text)[0]
    mid = re.findall(r'"mid":(\d+)?}',html.text)[0]
    print(aid,mid)
    get_playerURL_Vide0_m4s(url,aid,mid,loacl_path,index)

def test_get_html(url):
    '''
    当脚本失效时,用于测试流程
    :param aid: 视频id
    :param User_Mid: up主id
    :return:
    '''
    header = {
        'Host': 'www.bilibili.com',
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age = 0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate,br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Cookie': 'LIVE_BUVID=AUTO1515149705744511; fts=1514987102; buvid3=24187AEB-8DF0-4376-866B-F1675054F7D123662infoc; pgv_pvi=531680256; rpdid=olpksilwwsdosoplqmoww; im_notify_type_40745909=0; stardustvideo=1; UM_distinctid=165af12253a9bc-01c9b0cc001639-74173d4f-1fa400-165af12253c332; CURRENT_FNVAL=16; pos=3; _uuid=FEA87AF3-C1D8-61D8-D1D5-86926BCC7C6359589infoc; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1541642139; sid=jcfegf0q; CURRENT_QUALITY=64; bp_t_offset_40745909=220192575153103178; finger=17c9e5f5; DedeUserID=40745909; DedeUserID__ckMd5=50c54dcd485a8634; SESSDATA=056c38dd%2C1553642772%2C3456a621; bili_jct=6c5769cf41bc49479ba0c8afb26bff6d; _dfcaptcha=44fdc9360b372c8e5a1cc6cd6fe9faf0'

    }
    requests.packages.urllib3.disable_warnings()
    html = requests.get(url, headers=header, verify=False)
    print(html)
    aid = re.findall(r'"aid":(\d+?),', html.text)[0]
    mid = re.findall(r'"mid":(\d+)?}', html.text)[0]
    print(url,aid, mid)

    url = 'https://www.bilibili.com/video/av' + str(aid) +'?p=1' # 先拿一个试试
    header = {
        'Host': 'www.bilibili.com',
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age = 0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Referer': 'https://space.bilibilicom/' + str(mid) + '/',  # 这里是up主号 要注意
        'Accept-Encoding': 'gzip, deflate,br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Cookie': 'LIVE_BUVID=AUTO1515149705744511; fts=1514987102; buvid3=24187AEB-8DF0-4376-866B-F1675054F7D123662infoc; pgv_pvi=531680256; rpdid=olpksilwwsdosoplqmoww; im_notify_type_40745909=0; stardustvideo=1; UM_distinctid=165af12253a9bc-01c9b0cc001639-74173d4f-1fa400-165af12253c332; CURRENT_FNVAL=16; pos=3; _uuid=FEA87AF3-C1D8-61D8-D1D5-86926BCC7C6359589infoc; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1541642139; sid=jcfegf0q; CURRENT_QUALITY=64; bp_t_offset_40745909=220192575153103178; finger=17c9e5f5; DedeUserID=40745909; DedeUserID__ckMd5=50c54dcd485a8634; SESSDATA=056c38dd%2C1553642772%2C3456a621; bili_jct=6c5769cf41bc49479ba0c8afb26bff6d; _dfcaptcha=44fdc9360b372c8e5a1cc6cd6fe9faf0'

    }
    print(url)
    html = requests.get(url, headers=header,verify=False)
    print(html)
    print(html.text)
    flv_url = re.findall(r'"url":"(.*?flv.*?)?","backup_url"', html.text)
    vedio_url = re.findall(r'"id":64,"baseUrl":"(.*?m4s.*?)?",',html.text)
    file_name = re.findall(r'"part":"(.*?)?"',html.text)
    print(len(flv_url),len(vedio_url))
    print(flv_url)
    print(vedio_url)
    print(file_name)


def get_vedio_more(url,loacl_path = None):
    header = {
        'Host': 'www.bilibili.com',
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age = 0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate,br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Cookie': 'LIVE_BUVID=AUTO1515149705744511; fts=1514987102; buvid3=24187AEB-8DF0-4376-866B-F1675054F7D123662infoc; pgv_pvi=531680256; rpdid=olpksilwwsdosoplqmoww; im_notify_type_40745909=0; stardustvideo=1; UM_distinctid=165af12253a9bc-01c9b0cc001639-74173d4f-1fa400-165af12253c332; CURRENT_FNVAL=16; pos=3; _uuid=FEA87AF3-C1D8-61D8-D1D5-86926BCC7C6359589infoc; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1541642139; sid=jcfegf0q; CURRENT_QUALITY=64; bp_t_offset_40745909=220192575153103178; finger=17c9e5f5; DedeUserID=40745909; DedeUserID__ckMd5=50c54dcd485a8634; SESSDATA=056c38dd%2C1553642772%2C3456a621; bili_jct=6c5769cf41bc49479ba0c8afb26bff6d; _dfcaptcha=44fdc9360b372c8e5a1cc6cd6fe9faf0'

    }
    requests.packages.urllib3.disable_warnings()
    html = requests.get(url, headers=header, verify=False)
    print(html)
    aid = re.findall(r'"aid":(\d+?),', html.text)[0]
    mid = re.findall(r'"mid":(\d+)?}', html.text)[0]
    vedios = re.findall(r'"aid":'+str(aid)+r',"videos":(\d+)?,',html.text)[0]
    print(aid, mid,vedios)
    for i in range(1,int(vedios)+1):
        url_t = url + '?p' + str(i)
        get_from_url(url_t,loacl_path,index=i)

if __name__ == '__main__':
    #get_from_url('https://www.bilibili.com/video/av29463507?p=3','E:\\spiderFile\\bilibili\\概率论与数理统计',3)
    #get_vedio_more(r'https://www.bilibili.com/video/av29463507','E:\\spiderFile\\bilibili\\概率论与数理统计')
    #test_get_html('https://www.bilibili.com/video/av54121244')
    get_from_url('https://www.bilibili.com/video/av55246821','E:\\spiderFile\\bilibili\\Senorita')
